package handlers

import (
	"database/sql"
	"finuchet-bot/internal/repository"
	"finuchet-bot/internal/services"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type BotHandler struct {
	bot         *tgbotapi.BotAPI
	service     *services.FinanceService
	userStates  map[int64]string  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userAmounts map[int64]float64 // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

const (
	StateNone            = ""
	StateWaitingIncome   = "waiting_income"   // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –¥–æ—Ö–æ–¥–∞
	StateWaitingExpense  = "waiting_expense"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
	StateIncomeCategory  = "income_category"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
	StateExpenseCategory = "expense_category" // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
)

func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	repo := repository.NewPostgresRepository(db)
	service := services.NewFinanceService(repo)

	return &BotHandler{
		bot:         bot,
		service:     service,
		userStates:  make(map[int64]string),
		userAmounts: make(map[int64]float64),
	}, nil
}

func (h *BotHandler) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			h.handleCallbackQuery(update.CallbackQuery)
		} else if update.Message != nil {
			h.handleTransactionInput(update.Message)
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (h *BotHandler) handleTransactionInput(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID
	text := msg.Text

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞:
	if msg.Chat.IsGroup() || msg.Chat.IsSuperGroup() {
		// if !strings.Contains(text, "@"+h.bot.Self.UserName) {
		// 	log.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞")
		// 	return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
		// }
		text = strings.ReplaceAll(text, "@"+h.bot.Self.UserName, "")
		text = strings.TrimSpace(text) // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
	}

	switch text {
	case "/start":
		if err := h.service.RegisterUser(chatID); err != nil {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		} else {
			h.sendMainMenu(chatID)
		}
	case "/menu":
		h.sendMainMenu(chatID)
	case "/options":
		h.sendOptionMenu(chatID)
	case "/cancel":
		h.resetState(chatID) // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		h.bot.Send(tgbotapi.NewMessage(chatID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."))
		h.sendMainMenu(chatID) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		return
	}

	currentState := h.userStates[chatID]

	switch currentState {
	case StateWaitingIncome, StateWaitingExpense:
		amount, err := strconv.ParseFloat(strings.TrimSpace(text), 64)
		if err != nil || amount <= 0 {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
			return
		}

		h.userAmounts[chatID] = amount
		if currentState == StateWaitingIncome {
			h.userStates[chatID] = StateIncomeCategory
			h.sendIncomeCategories(chatID)
		} else {
			h.userStates[chatID] = StateExpenseCategory
			h.sendExpenseCategories(chatID)
		}

		// default:
		// 	h.sendMainMenu(chatID)
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥" –∏ "–û—Ç—á–µ—Ç"
func (h *BotHandler) sendMainMenu(chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ—Ö–æ–¥ üìà", "income"),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞—Å—Ö–æ–¥ üìâ", "expense"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç—á–µ—Ç üìä", "report"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = buttons
	h.bot.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery
func (h *BotHandler) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID
	data := callbackQuery.Data
	// text := callbackQuery.Message.Text

	switch data {
	case "income":
		h.userStates[chatID] = StateWaitingIncome
		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"))

	case "expense":
		h.userStates[chatID] = StateWaitingExpense
		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"))

	case "report":
		h.handleReportCommand(chatID)

	case "clear":
		h.handleClearData(chatID)

	case "salary", "debit", "invest", "deposit":
		h.addIncome(chatID, data)

	case "shop", "service", "cafe", "link", "educ":
		h.addExpense(chatID, data)
	}

	// –û—Ç–º–µ—Ç–∏–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
	callbackConfig := tgbotapi.NewCallback(callbackQuery.ID, "")
	if _, err := h.bot.Request(callbackConfig); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CallbackQuery –æ—Ç–≤–µ—Ç–∞: %v", err)
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è /utils
func (h *BotHandler) sendOptionMenu(chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù", "edit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í—ã–≥—Ä—É–∑–∫–∞ üì§", "export"),
			tgbotapi.NewInlineKeyboardButtonData("–û—á–∏—Å—Ç–∫–∞ üßπ", "clear"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = buttons
	h.bot.Send(msg)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
func (h *BotHandler) handleClearData(chatID int64) {
	if err := h.service.ClearData(chatID); err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."))
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã."))
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
// func (h *BotHandler) handleExportData(chatID int64) {
// 	data, err := h.service.ExportData(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"+data))
// 	}
// }

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
func (h *BotHandler) sendIncomeCategories(chatID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó/–ø üí∏", "salary"),
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–±–∏—Ç–æ—Ä ü´¥", "debit"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–µ–º–∏—è üí∞", "prize"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ ü§ë", "addinc"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ò–Ω–≤–µ—Å—Ç üíπ", "invest"),
			tgbotapi.NewInlineKeyboardButtonData("–í–∫–ª–∞–¥ üè¶", "deposit"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:")
	msg.ReplyMarkup = buttons
	h.bot.Send(msg)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
func (h *BotHandler) sendExpenseCategories(chatID int64) {
	categories := [][]string{
		{"–ê–ø—Ç–µ–∫–∏ üè•", "phar"}, {"–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã üõ´", "avia"},
		{"–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã üï∂Ô∏è", "access"}, {"–ê–Ω–∞–ª–∏–∑—ã üíâ", "analys"},
		{"–ê—Ä–µ–Ω–¥–∞ üîë", "rent"}, {"–ë—ã—Ç–•–∏–º üßπ", "household"},
		{"–í–∏—Ç–∞–º–∏–Ω—ã üíä", "vitamin"}, {"–ì–æ—Å—É—Å–ª—É–≥–∏ üè¢", "state"},
		{"–î–æ–º –∏ —Ä–µ–º–æ–Ω—Ç üõ†Ô∏è", "repair"}, {"–ñ/–¥ –±–∏–ª–µ—Ç—ã üöÇ", "rail"},
		{"–ñ–∏–≤–æ—Ç–Ω—ã–µ üêæ", "animal"}, {"–ñ–ö–• üëæ", "service"},
		{"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ üíπ", "invest"}, {"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç üåê", "network"},
		{"–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã üìù", "office"}, {"–ö–∞—Ä—à–µ—Ä–∏–Ω–≥ üèéÔ∏è", "carsh"},
		{"–ö–Ω–∏–≥–∏ üìö", "book"}, {"–ö—Ä–∞—Å–æ—Ç–∞ üòª", "beauty"},
		{"–ö—Ä–µ–¥–∏—Ç—ã üí∏", "Loan"}, {"–ú–µ–¥–∏—Ü–∏–Ω–∞ ü©∫", "medic"},
		{"–ú–æ–±. —Å–≤—è–∑—å üìû", "mobile"}, {"–ù–∞–ª–∏—á–Ω—ã–µ üóûÔ∏è", "cash"},
		{"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üéì", "educ"}, {"–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—åüëü", "clothes"},
		{"–ü–µ—Ä–µ–≤–æ–¥—ã üì§", "trans"}, {"–ü–æ–¥–∞—Ä–∫–∏ üéÅ", "gift"},
		{"–ü–æ–¥–ø–∏—Å–∫–∏ ü§≥", "subscript"}, {"–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è üé¢", "fun"},
		{"–ï–¥–∞ üçú", "eat"}, {"–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç üõí", "mall"},
		{"–¢–∞–∫—Å–∏ üöï", "taxi"}, {"–¢–æ–ø–ª–∏–≤–æ ‚õΩÔ∏è", "oil"},
		{"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöå", "transport"}, {"–¶–≤–µ—Ç—ã üíê", "flowers"},
		{"–°–ø–æ—Ä—Ç üí™", "sport"}, {"–û—Å—Ç–∞–ª—å–Ω–æ–µ üôâ", "other"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < len(categories); i += 2 {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(categories[i][0], categories[i][1]),
			tgbotapi.NewInlineKeyboardButtonData(categories[i+1][0], categories[i+1][1]),
		)
		rows = append(rows, row)
	}

	buttons := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
	msg.ReplyMarkup = buttons
	h.bot.Send(msg)
}

func (h *BotHandler) addIncome(chatID int64, category string) {
	amount := h.userAmounts[chatID]
	if err := h.service.AddIncome(chatID, amount, category); err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
	}
	h.resetState(chatID)
	h.sendMainMenu(chatID)
}

func (h *BotHandler) addExpense(chatID int64, category string) {
	amount := h.userAmounts[chatID]
	if err := h.service.AddExpense(chatID, amount, category); err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
	}
	h.resetState(chatID)
	h.sendMainMenu(chatID)
}

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *BotHandler) resetState(chatID int64) {
	h.userStates[chatID] = StateNone
	delete(h.userAmounts, chatID)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
func (h *BotHandler) handleReportCommand(chatID int64) {
	report, err := h.service.GetReport(chatID)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
	} else {
		h.bot.Send(tgbotapi.NewMessage(chatID, report))
	}
}

// package handlers

// import (
// 	"database/sql"
// 	"finuchet-bot/internal/repository"
// 	"finuchet-bot/internal/services"
// 	"log"
// 	"strconv"
// 	"strings"

// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// )

// type BotHandler struct {
// 	bot         *tgbotapi.BotAPI
// 	service     *services.FinanceService
// 	userStates  map[int64]string  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 	userAmounts map[int64]float64 // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// }

// const (
// 	StateNone            = ""
// 	StateWaitingIncome   = "waiting_income"   // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –¥–æ—Ö–æ–¥–∞
// 	StateWaitingExpense  = "waiting_expense"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
// 	StateIncomeCategory  = "income_category"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
// 	StateExpenseCategory = "expense_category" // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
// )

// func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
// 	bot, err := tgbotapi.NewBotAPI(token)
// 	if err != nil {
// 		return nil, err
// 	}

// 	repo := repository.NewPostgresRepository(db)
// 	service := services.NewFinanceService(repo)

// 	return &BotHandler{
// 		bot:         bot,
// 		service:     service,
// 		userStates:  make(map[int64]string),
// 		userAmounts: make(map[int64]float64),
// 	}, nil
// }

// func (h *BotHandler) Start() {
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)

// 	for update := range updates {
// 		if update.CallbackQuery != nil {
// 			h.handleCallbackQuery(update.CallbackQuery)
// 		}
// 		// if update.Message != nil {
// 		// 	h.handleMessage(update.Message)
// 		// } else if update.CallbackQuery != nil {
// 		// 	h.handleCallbackQuery(update.CallbackQuery)
// 		// }
// 	}
// }

// // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ KeyboardButton:
// // func (h *BotHandler) handleMessage(msg *tgbotapi.Message) {
// // 	chatID := msg.Chat.ID
// // 	text := msg.Text

// // 	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
// // 	if msg.Chat.IsGroup() || msg.Chat.IsSuperGroup() {
// // 		// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
// // 		// if !strings.Contains(text, "@"+h.bot.Self.UserName) {
// // 		// 	log.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞")
// // 		// 	return // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
// // 		// }
// // 		// –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
// // 		text = strings.ReplaceAll(text, "@"+h.bot.Self.UserName, "")
// // 		text = strings.TrimSpace(text) // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
// // 	}

// // 	switch {
// // 	case text == "/start":
// // 		if err := h.service.RegisterUser(chatID); err != nil {
// // 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
// // 			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
// // 		} else {
// // 			h.sendMainMenu(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
// // 		}

// // 	case text == "–î–æ—Ö–æ–¥ üìà":
// // 		h.userStates[chatID] = StateWaitingIncome
// // 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"))

// // 	case text == "–†–∞—Å—Ö–æ–¥ üìâ":
// // 		h.userStates[chatID] = StateWaitingExpense
// // 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"))

// // 	case text == "–û—Ç—á–µ—Ç üìä":
// // 		h.handleReportCommand(chatID)

// // 	default:
// // 		h.handleTransactionInput(chatID, text)
// // 	}
// // }

// // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ InlineKeyboard:
// func (h *BotHandler) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
// 	chatID := callbackQuery.Message.Chat.ID
// 	data := callbackQuery.Data

// 	switch data {
// 	case "income":
// 		h.userStates[chatID] = StateWaitingIncome
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"))

// 	case "expense":
// 		h.userStates[chatID] = StateWaitingExpense
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"))

// 	case "report":
// 		h.handleReportCommand(chatID)
// 	}

// 	// –û—Ç–º–µ—Ç–∏–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
// 	// h.bot.AnswerCallbackQuery(tgbotapi.NewCallback(callbackQuery.ID, ""))
// 	callbackConfig := tgbotapi.NewCallback(callbackQuery.ID, "")
// 	if _, err := h.bot.Request(callbackConfig); err != nil {
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ CallbackQuery –æ—Ç–≤–µ—Ç–∞: %v", err)
// 	}
// }

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥" –∏ "–û—Ç—á–µ—Ç"
// func (h *BotHandler) sendMainMenu(chatID int64) {
// 	buttons := tgbotapi.NewInlineKeyboardMarkup(
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–î–æ—Ö–æ–¥ üìà", "income"),
// 			tgbotapi.NewInlineKeyboardButtonData("–†–∞—Å—Ö–æ–¥ üìâ", "expense"),
// 		),
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–û—Ç—á–µ—Ç üìä", "report"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// func (h *BotHandler) sendMainMenu(chatID int64) {
// 	buttons := tgbotapi.NewReplyKeyboard(
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("–î–æ—Ö–æ–¥ üìà"),
// 			tgbotapi.NewKeyboardButton("–†–∞—Å—Ö–æ–¥ üìâ"),
// 		),
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("–û—Ç—á–µ—Ç üìä"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
// func (h *BotHandler) sendIncomeCategories(chatID int64) {
// 	buttons := tgbotapi.NewInlineKeyboardMarkup(
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–ó/–ø üí∏", "salary"),
// 			tgbotapi.NewInlineKeyboardButtonData("–î–µ–±–∏—Ç–æ—Ä ü´¥", "debit"),
// 		),
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–ò–Ω–≤–µ—Å—Ç üíπ", "invest"),
// 			tgbotapi.NewInlineKeyboardButtonData("–í–∫–ª–∞–¥ üè¶", "deposit"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
// func (h *BotHandler) sendExpenseCategories(chatID int64) {
// 	// buttons := tgbotapi.NewInlineKeyboardMarkup(
// 	// 	tgbotapi.NewInlineKeyboardRow(
// 	// 		tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–¥—É–∫—Ç—ã üõí", "eat"),
// 	// 		tgbotapi.NewInlineKeyboardButtonData("–ñ–ö–• üëæ", "room"),
// 	// 		tgbotapi.NewInlineKeyboardButtonData("–ö–∞—Ñ–µ üçú", "cafe"),
// 	// 	),
// 	// 	tgbotapi.NewInlineKeyboardRow(
// 	// 		tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑—å üåê", "link"),
// 	// 		tgbotapi.NewInlineKeyboardButtonData("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üìö", "edu"),
// 	// 	),
// 	// )
// 	buttons := tgbotapi.NewInlineKeyboardMarkup(
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–¥—É–∫—Ç—ã üõí", "shop"),
// 			tgbotapi.NewInlineKeyboardButtonData("–ñ–ö–• üëæ", "service"),
// 			tgbotapi.NewInlineKeyboardButtonData("–ö–∞—Ñ–µ üçú", "cafe"),
// 		),
// 		tgbotapi.NewInlineKeyboardRow(
// 			tgbotapi.NewInlineKeyboardButtonData("–°–≤—è–∑—å üåê", "link"),
// 			tgbotapi.NewInlineKeyboardButtonData("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ üìö", "educ"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
// func (h *BotHandler) handleTransactionInput(chatID int64, text string) {
// 	currentState := h.userStates[chatID]
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)

// 	switch currentState {
// 	case StateWaitingIncome, StateWaitingExpense:
// 		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã
// 		amount, err := strconv.ParseFloat(strings.TrimSpace(text), 64)
// 		if err != nil || amount <= 0 {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 			return
// 		}

// 		h.userAmounts[chatID] = amount // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
// 		if currentState == StateWaitingIncome {
// 			h.userStates[chatID] = StateIncomeCategory
// 			h.sendIncomeCategories(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
// 		} else {
// 			h.userStates[chatID] = StateExpenseCategory
// 			h.sendExpenseCategories(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
// 		}

// 	case StateIncomeCategory:
// 		category := strings.TrimSpace(text)

// 		if category == "" {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞."))
// 			return
// 		}

// 		amount := h.userAmounts[chatID]
// 		if err := h.service.AddIncome(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
// 		h.userStates[chatID] = StateNone
// 		delete(h.userAmounts, chatID) // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã
// 		// h.sendMainMenu(chatID)        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

// 	case StateExpenseCategory:
// 		category := strings.TrimSpace(text)
// 		if category == "" {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞."))
// 			return
// 		}

// 		amount := h.userAmounts[chatID]
// 		if err := h.service.AddExpense(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
// 		h.userStates[chatID] = StateNone
// 		delete(h.userAmounts, chatID) // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã
// 		// h.sendMainMenu(chatID)        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é

// 	default:
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "–î–æ—Ö–æ–¥ üìà", "–†–∞—Å—Ö–æ–¥ üìâ" –∏–ª–∏ "–û—Ç—á–µ—Ç üìä"."))
// 	}

// 	for update := range updates {
// 		if update.CallbackQuery != nil {
// 			h.handleCallbackQuery(update.CallbackQuery) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
// 		}
// 	}
// }

// // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
// func (h *BotHandler) handleReportCommand(chatID int64) {
// 	report, err := h.service.GetReport(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, report))
// 	}
// }

// package handlers

// import (
// 	"database/sql"
// 	"finuchet-bot/internal/repository"
// 	"finuchet-bot/internal/services"
// 	"log"
// 	"strconv"
// 	"strings"

// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// )

// type BotHandler struct {
// 	bot         *tgbotapi.BotAPI
// 	service     *services.FinanceService
// 	userStates  map[int64]string  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// 	userAmounts map[int64]float64 // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// }

// const (
// 	StateNone            = ""
// 	StateWaitingIncome   = "waiting_income"   // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –¥–æ—Ö–æ–¥–∞
// 	StateWaitingExpense  = "waiting_expense"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
// 	StateIncomeCategory  = "income_category"  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞
// 	StateExpenseCategory = "expense_category" // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞
// )

// func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
// 	bot, err := tgbotapi.NewBotAPI(token)
// 	if err != nil {
// 		return nil, err
// 	}

// 	repo := repository.NewPostgresRepository(db)
// 	service := services.NewFinanceService(repo)

// 	return &BotHandler{
// 		bot:         bot,
// 		service:     service,
// 		userStates:  make(map[int64]string),
// 		userAmounts: make(map[int64]float64),
// 	}, nil
// }

// func (h *BotHandler) Start() {
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)

// 	for update := range updates {
// 		if update.Message != nil {
// 			h.handleMessage(update.Message)
// 		}
// 	}
// }

// func (h *BotHandler) handleMessage(msg *tgbotapi.Message) {
// 	chatID := msg.Chat.ID
// 	text := msg.Text

// 	switch {
// 	case text == "/start":
// 		if err := h.service.RegisterUser(chatID); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
// 			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
// 		} else {
// 			h.sendMainMenu(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
// 		}

// 	case text == "income":
// 		h.userStates[chatID] = StateWaitingIncome
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:"))

// 	case text == "expense":
// 		h.userStates[chatID] = StateWaitingExpense
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:"))

// 	case text == "/report":
// 		h.handleReportCommand(chatID)

// 	default:
// 		h.handleTransactionInput(chatID, text)
// 	}
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "income" –∏ "expense"
// func (h *BotHandler) sendMainMenu(chatID int64) {
// 	buttons := tgbotapi.NewReplyKeyboard(
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("income"),
// 			tgbotapi.NewKeyboardButton("expense"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
// func (h *BotHandler) handleTransactionInput(chatID int64, text string) {
// 	currentState := h.userStates[chatID]

// 	switch currentState {
// 	case StateWaitingIncome, StateWaitingExpense:
// 		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã
// 		amount, err := strconv.ParseFloat(strings.TrimSpace(text), 64)
// 		if err != nil || amount <= 0 {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 			return
// 		}

// 		h.userAmounts[chatID] = amount // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
// 		if currentState == StateWaitingIncome {
// 			h.userStates[chatID] = StateIncomeCategory
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:"))
// 		} else {
// 			h.userStates[chatID] = StateExpenseCategory
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:"))
// 		}

// 	case StateIncomeCategory:
// 		category := strings.TrimSpace(text)
// 		if category == "" {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞."))
// 			return
// 		}

// 		amount := h.userAmounts[chatID]
// 		if err := h.service.AddIncome(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
// 		h.userStates[chatID] = StateNone
// 		delete(h.userAmounts, chatID) // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã

// 	case StateExpenseCategory:
// 		category := strings.TrimSpace(text)
// 		if category == "" {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞."))
// 			return
// 		}

// 		amount := h.userAmounts[chatID]
// 		if err := h.service.AddExpense(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 		// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
// 		h.userStates[chatID] = StateNone
// 		delete(h.userAmounts, chatID) // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—É–º–º—ã

// 	default:
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "income" –∏–ª–∏ "expense"."))
// 	}
// }

// func (h *BotHandler) handleReportCommand(chatID int64) {
// 	report, err := h.service.GetReport(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, report))
// 	}
// }

// package handlers

// import (
// 	"database/sql"
// 	"finuchet-bot/internal/repository"
// 	"finuchet-bot/internal/services"
// 	"log"
// 	"strconv"
// 	"strings"

// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// )

// type BotHandler struct {
// 	bot        *tgbotapi.BotAPI
// 	service    *services.FinanceService
// 	userStates map[int64]string // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–æ–Ω—Ç–µ–∫—Å—Ç) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// }

// const (
// 	StateNone    = ""
// 	StateIncome  = "income"
// 	StateExpense = "expense"
// )

// func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
// 	bot, err := tgbotapi.NewBotAPI(token)
// 	if err != nil {
// 		return nil, err
// 	}

// 	repo := repository.NewPostgresRepository(db)
// 	service := services.NewFinanceService(repo)

// 	return &BotHandler{
// 		bot:        bot,
// 		service:    service,
// 		userStates: make(map[int64]string),
// 	}, nil
// }

// func (h *BotHandler) Start() {
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)

// 	for update := range updates {
// 		if update.Message != nil {
// 			h.handleMessage(update.Message)
// 		}
// 	}
// }

// func (h *BotHandler) handleMessage(msg *tgbotapi.Message) {
// 	chatID := msg.Chat.ID
// 	text := msg.Text

// 	switch {
// 	case text == "/start":
// 		if err := h.service.RegisterUser(chatID); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
// 			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
// 		} else {
// 			h.sendMainMenu(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
// 		}

// 	case text == "income":
// 		h.userStates[chatID] = StateIncome
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))

// 	case text == "expense":
// 		h.userStates[chatID] = StateExpense
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))

// 	case text == "/report":
// 		h.handleReportCommand(chatID)

// 	default:
// 		h.handleTransactionInput(chatID, text)
// 	}
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "income" –∏ "expense"
// func (h *BotHandler) sendMainMenu(chatID int64) {
// 	buttons := tgbotapi.NewReplyKeyboard(
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("income"),
// 			tgbotapi.NewKeyboardButton("expense"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
// func (h *BotHandler) handleTransactionInput(chatID int64, text string) {
// 	parts := strings.Fields(text)
// 	if len(parts) != 2 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))
// 		return
// 	}

// 	amount, err := strconv.ParseFloat(parts[0], 64)
// 	if err != nil || amount <= 0 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 		return
// 	}

// 	category := parts[1]
// 	currentState := h.userStates[chatID]

// 	switch currentState {
// 	case StateIncome:
// 		if err := h.service.AddIncome(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 	case StateExpense:
// 		if err := h.service.AddExpense(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}
// 	default:
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "income" –∏–ª–∏ "expense"."))
// 	}

// 	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// 	h.userStates[chatID] = StateNone
// }

// func (h *BotHandler) handleReportCommand(chatID int64) {
// 	report, err := h.service.GetReport(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, report))
// 	}
// }

// package handlers

// import (
// 	"database/sql"
// 	"finuchet-bot/internal/repository"
// 	"finuchet-bot/internal/services"
// 	"log"
// 	"strconv"
// 	"strings"

// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// )

// type BotHandler struct {
// 	bot        *tgbotapi.BotAPI
// 	service    *services.FinanceService
// 	userStates map[int64]string // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–æ–Ω—Ç–µ–∫—Å—Ç) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// }

// const (
// 	StateNone    = ""
// 	StateIncome  = "income"
// 	StateExpense = "expense"
// )

// func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
// 	bot, err := tgbotapi.NewBotAPI(token)
// 	if err != nil {
// 		return nil, err
// 	}

// 	repo := repository.NewPostgresRepository(db)
// 	service := services.NewFinanceService(repo)

// 	return &BotHandler{
// 		bot:        bot,
// 		service:    service,
// 		userStates: make(map[int64]string),
// 	}, nil
// }

// func (h *BotHandler) Start() {
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)

// 	for update := range updates {
// 		if update.Message != nil {
// 			h.handleMessage(update.Message)
// 		}
// 	}
// }

// func (h *BotHandler) handleMessage(msg *tgbotapi.Message) {
// 	chatID := msg.Chat.ID
// 	text := msg.Text

// 	switch {
// 	case text == "/start":
// 		if err := h.service.RegisterUser(chatID); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
// 			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
// 		} else {
// 			h.sendMainMenu(chatID) // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
// 		}

// 	case text == "–î–æ—Ö–æ–¥":
// 		h.userStates[chatID] = StateIncome
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))

// 	case text == "–†–∞—Å—Ö–æ–¥":
// 		h.userStates[chatID] = StateExpense
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))

// 	case text == "/report":
// 		h.handleReportCommand(chatID)

// 	default:
// 		h.handleTransactionInput(chatID, text)
// 	}
// }

// // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ—Ö–æ–¥" –∏ "–†–∞—Å—Ö–æ–¥"
// func (h *BotHandler) sendMainMenu(chatID int64) {
// 	buttons := tgbotapi.NewReplyKeyboard(
// 		tgbotapi.NewKeyboardButtonRow(
// 			tgbotapi.NewKeyboardButton("–î–æ—Ö–æ–¥"),
// 			tgbotapi.NewKeyboardButton("–†–∞—Å—Ö–æ–¥"),
// 		),
// 	)

// 	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
// 	msg.ReplyMarkup = buttons
// 	h.bot.Send(msg)
// }

// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
// func (h *BotHandler) handleTransactionInput(chatID int64, text string) {
// 	parts := strings.Fields(text)
// 	if len(parts) != 2 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))
// 		return
// 	}

// 	amount, err := strconv.ParseFloat(parts[0], 64)
// 	if err != nil || amount <= 0 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 		return
// 	}

// 	category := parts[1]
// 	currentState := h.userStates[chatID]

// 	switch currentState {
// 	case StateIncome:
// 		if err := h.service.AddIncome(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}

// 	case StateExpense:
// 		if err := h.service.AddExpense(chatID, amount, category); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
// 			log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 		}
// 	default:
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ "income" –∏–ª–∏ "expense"."))
// 	}

// 	// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
// 	h.userStates[chatID] = StateNone
// }

// func (h *BotHandler) handleReportCommand(chatID int64) {
// 	report, err := h.service.GetReport(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, report))
// 	}
// }

// package handlers

// import (
// 	"database/sql"
// 	"finance-bot/internal/services"
// 	"fmt"
// 	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
// 	"log"
// )

// type BotHandler struct {
// 	bot      *tgbotapi.BotAPI
// 	service  *services.FinanceService
// }

// func NewBotHandler(token string, db *sql.DB) (*BotHandler, error) {
// 	bot, err := tgbotapi.NewBotAPI(token)
// 	if err != nil {
// 		return nil, err
// 	}

// 	repo := repository.NewPostgresRepository(db)
// 	service := services.NewFinanceService(repo)

// 	return &BotHandler{bot: bot, service: service}, nil
// }

// func (h *BotHandler) Start() {
// 	u := tgbotapi.NewUpdate(0)
// 	u.Timeout = 60

// 	updates := h.bot.GetUpdatesChan(u)
// 	for update := range updates {
// 		if update.Message != nil {
// 			h.handleMessage(update.Message)
// 		}
// 	}
// }

// func (h *BotHandler) handleMessage(msg *tgbotapi.Message) {
// 	chatID := msg.Chat.ID
// 	text := msg.Text

// 	switch {
// 	case text == "/start":
// 		if err := h.service.RegisterUser(chatID); err != nil {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
// 			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
// 		} else {
// 			h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /income, /expense –∏–ª–∏ /report –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."))
// 		}

// 	case strings.HasPrefix(text, "/income"):
// 		h.handleIncomeCommand(chatID, text)

// 	case strings.HasPrefix(text, "/expense"):
// 		h.handleExpenseCommand(chatID, text)

// 	case text == "/report":
// 		h.handleReportCommand(chatID)

// 	default:
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /income, /expense –∏–ª–∏ /report."))
// 	}
// }

// func (h *BotHandler) handleIncomeCommand(chatID int64, text string) {
// 	parts := strings.Fields(text)
// 	if len(parts) != 3 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /income <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))
// 		return
// 	}

// 	amount, err := strconv.ParseFloat(parts[1], 64)
// 	if err != nil || amount <= 0 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 		return
// 	}

// 	category := parts[2]
// 	if err := h.service.AddIncome(chatID, amount, category); err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 	}
// }

// func (h *BotHandler) handleExpenseCommand(chatID int64, text string) {
// 	parts := strings.Fields(text)
// 	if len(parts) != 3 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /expense <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"))
// 		return
// 	}

// 	amount, err := strconv.ParseFloat(parts[1], 64)
// 	if err != nil || amount <= 0 {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."))
// 		return
// 	}

// 	category := parts[2]
// 	if err := h.service.AddExpense(chatID, amount, category); err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
// 	}
// }

// func (h *BotHandler) handleReportCommand(chatID int64) {
// 	report, err := h.service.GetReport(chatID)
// 	if err != nil {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞."))
// 		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
// 	} else {
// 		h.bot.Send(tgbotapi.NewMessage(chatID, report))
// 	}
// }
